{"version":3,"file":"static/js/387.5e522646.chunk.js","mappings":"wPAEMA,EAAgBC,EAAAA,GAAAA,IAAH,2CACN,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGRC,EAAWJ,EAAAA,GAAAA,GAAH,wFAGD,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGRE,EAAWL,EAAAA,GAAAA,GAAH,4FACM,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACF,SAAAF,GAAC,OAAIA,EAAEC,MAAMI,QAAQC,MAApB,IAGdC,EAAWR,EAAAA,GAAAA,EAAH,yEACG,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACE,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,SCcrB,EA3Ba,WAAO,IAAD,EACTM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcN,GAASO,KAAKH,EAC7B,GAAE,CAACJ,KAGF,SAACV,EAAD,WACE,SAACK,EAAD,oBACGQ,EAAMK,YADT,aACG,EAAYC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACf,UAACjB,EAAD,YACE,gBACEkB,IAAG,yCAAoCH,GACvCI,IAAI,WACJC,MAAM,SAER,SAACjB,EAAD,UAAWa,KACX,4CAAkBC,OAPLH,EADA,OAcxB,C,iMC7BKO,EAAM,mCACNC,EAAU,gCAGVC,EAAiB,mCAAG,mGAClBC,EADkB,UACTF,GADS,OAFG,qBAEH,oBACiCD,GADjC,SAeDI,EAAAA,EAAAA,IAAUD,GAfT,uBAehBE,EAfgB,EAehBA,KAfgB,SAgBEA,EAhBF,uBAgBhBC,EAhBgB,EAgBhBA,QAhBgB,kBAiBjBA,GAjBiB,4CAAH,qDAoBjBC,EAAc,mCAAG,WAAMxB,GAAN,kFACfoB,EADe,UACNF,EADM,iBACUlB,EADV,oBAC6BiB,EAD7B,4BAEEI,EAAAA,EAAAA,IAAUD,GAFZ,uBAEbE,EAFa,EAEbA,KAFa,kBAIdA,GAJc,2CAAH,sDAOdhB,EAAa,mCAAG,WAAMN,GAAN,kFACdoB,EADc,UACLF,EADK,iBACWlB,EADX,4BACsCiB,EADtC,4BAEGI,EAAAA,EAAAA,IAAUD,GAFb,uBAEZE,EAFY,EAEZA,KAFY,kBAGbA,GAHa,2CAAH,sDAMbG,EAAY,mCAAG,WAAMzB,GAAN,kFACboB,EADa,UACJF,EADI,iBACYlB,EADZ,4BACuCiB,EADvC,mCAEII,EAAAA,EAAAA,IAAUD,GAFd,uBAEXE,EAFW,EAEXA,KAFW,kBAGZA,GAHY,2CAAH,sDAMZI,EAAiB,mCAAG,WAAMC,GAAN,kFAClBP,EADkB,UACTF,EADS,gCACsBD,EADtB,iCACkDU,EADlD,wCAEDN,EAAAA,EAAAA,IAAUD,GAFT,uBAEhBE,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","utils/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst CastContainer = styled.div`\n  padding: ${p => p.theme.space[2]}px;\n`;\n\nconst CastList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  row-gap: ${p => p.theme.space[4]}px;\n`;\n\nconst CastItem = styled.li`\n  padding-bottom: ${p => p.theme.space[3]}px;\n  border-bottom: ${p => p.theme.borders.normal} rgba(0, 0, 0, 0.2);\n`;\n\nconst CastName = styled.p`\n  padding-top: ${p => p.theme.space[5]}px;\n  padding-bottom: ${p => p.theme.space[5]}px;\n`;\n\nexport { CastContainer, CastItem, CastList, CastName };\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastById } from 'utils/Api';\n\nimport { CastContainer, CastItem, CastList, CastName } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState({});\n\n  useEffect(() => {\n    fetchCastById(movieId).then(setCasts);\n  }, [movieId]);\n\n  return (\n    <CastContainer>\n      <CastList>\n        {casts.cast?.map(({ id, profile_path, name, character }) => (\n          <CastItem key={id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n              alt=\"Img name\"\n              width=\"160\"\n            />\n            <CastName>{name}</CastName>\n            <p>{`Character: ${character}`}</p>\n          </CastItem>\n        ))}\n      </CastList>\n    </CastContainer>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst KEY = 'fc3059b93409f1f02abdc6e15de200bc';\nconst baseUrl = 'https://api.themoviedb.org/3/';\nconst popularFilmsOfDayUrl = 'trending/movie/day';\n\nconst fetchPopularFilms = async () => {\n  const url = `${baseUrl}${popularFilmsOfDayUrl}?api_key=${KEY}`;\n\n  //===============Use fetch=================================================\n  //   return fetch(url)\n  //     .then(resp => resp.json())\n  //     .then(parsed => parsed.results);\n\n  //=============Use axios===================================================\n  //   const resp = await axios.get(url);\n  //   const data = await resp.data;\n  //   const results = data.results;\n  //   return results;\n\n  //=============Use axios with destructuring==================================================\n  const { data } = await axios.get(url);\n  const { results } = await data;\n  return results;\n};\n\nconst fetchMovieById = async movieId => {\n  const url = `${baseUrl}movie/${movieId}?api_key=${KEY}&language=en-US`;\n  const { data } = await axios.get(url);\n\n  return data;\n};\n\nconst fetchCastById = async movieId => {\n  const url = `${baseUrl}movie/${movieId}/credits?api_key=${KEY}&language=en-US`;\n  const { data } = await axios.get(url);\n  return data;\n};\n\nconst fetchReviews = async movieId => {\n  const url = `${baseUrl}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`;\n  const { data } = await axios.get(url);\n  return data;\n};\n\nconst fetchMovieByQuery = async query => {\n  const url = `${baseUrl}search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\n  const { data } = await axios.get(url);\n  return data;\n};\n\nexport {\n  fetchPopularFilms,\n  fetchMovieById,\n  fetchCastById,\n  fetchReviews,\n  fetchMovieByQuery,\n};\n"],"names":["CastContainer","styled","p","theme","space","CastList","CastItem","borders","normal","CastName","movieId","useParams","useState","casts","setCasts","useEffect","fetchCastById","then","cast","map","id","profile_path","name","character","src","alt","width","KEY","baseUrl","fetchPopularFilms","url","axios","data","results","fetchMovieById","fetchReviews","fetchMovieByQuery","query"],"sourceRoot":""}